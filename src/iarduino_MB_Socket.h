//	Библиотека для работы с розеткой iarduino Modbus: https://iarduino.ru/shop/Expansion-payments/socket-Modbus-RS485.html
//  Версия: 1.0.1
//  Последнюю версию библиотеки Вы можете скачать по ссылке: https://iarduino.ru/file/592.html
//  Подробное описание функции бибилиотеки доступно по ссылке: https://wiki.iarduino.ru/page/socket-Modbus-RS485/
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_MB_Socket_h
#define iarduino_MB_Socket_h

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#include <iarduino_Modbus.h>													//	Подключаем файл iarduino_Modbus.h - для работы по протоколу Modbus.
																				//
#define DEF_MODEL_SOCKET 1														//	Идентификатор модели - константа.
																				//
#define SOCKET_SENSOR_ALL 0														//	Аргумент функции digitalRead() - прочитать состояния всех датчиков уровня житскости. Функция вернёт байт, три младших бита которого отражают состояния датчиков.
#define SOCKET_SENSOR_MIN 1														//	Аргумент функции digitalRead() - прочитать состояние датчика уровня житскости MIN.
#define SOCKET_SENSOR_MID 2														//	Аргумент функции digitalRead() - прочитать состояние датчика уровня житскости MID.
#define SOCKET_SENSOR_MAX 3														//	Аргумент функции digitalRead() - прочитать состояние датчика уровня житскости MAX.
																				//
class iarduino_MB_Socket{														//
	public:																		//
	/**	Конструктор класса **/													//
		iarduino_MB_Socket				(ModbusClient&	);						//	Объявляем конструктор класса.											Параметры: ссылка на объект работы по протоколу Modbus.
	/**	Пользовательские функции **/											//
		bool			begin			(uint8_t id=0	);						//	Объявляем  функцию инициализации розетки.								Параметры функции: ID розетки. Функция возвращает результат инициализации: true-успех / false-провал.
		bool			reset			(void			);						//	Объявляем  функцию перезагрузки розетки.								Параметры функции: нет. Функция возвращает результат перезагрузки: true-успех / false-провал.
		bool			changeID		(uint8_t new_id	);						//	Объявляем  функцию смены ID розетки (выполняется >120мс).				Параметры функции: новый ID. Функция возвращает результат смены ID: true-успех / false-провал.
		bool			setSpeedMB		(uint32_t speed	);						//	Объявляем  функцию смены скорости передачи данных.						Параметры функции: новая скорость. Функция возвращает результат смены скорости: true-успех / false-провал. Скорость необходимо подтвердить в течении 2 секунд.
		bool			ackSpeedMB		(void			);						//	Объявляем  функцию подтверждения скорости (выполняется >50мс).			Параметры функции: нет. Функция возвращает результат подтверждения скорости: true-успех / false-провал. 
		bool			setTypeMB		(uint8_t type	);						//	Объявляем  функцию смены типа протокола Modbus.							Параметры функции: MODBUS_RTU/MODBUS_ASCII. Функция возвращает результат смены типа протокола Modbus: true-успех / false-провал. Тип необходимо подтвердить в течении 2 секунд.
		bool			ackTypeMB		(void			);						//	Объявляем  функцию подтверждения типа протокола (выполняется >50мс).	Параметры функции: нет. Функция возвращает результат подтверждения типа протокола Modbus: true-успех / false-провал. 
		bool			writeFlash		(uint16_t data	);						//	Объявляем  функцию записи пользовательского значения в Flash память.	Параметры функции: целое беззнаковое число от 0 до 65535. Функция возвращает результат записи: true-успех / false-провал. 
		int32_t			readFlash		(void			);						//	Объявляем  функцию чтения пользовательского значения из Flash памяти.	Параметры функции: нет. Функция возвращает прочитанное значение, или -1 при провале чтения.
		uint8_t			getID			(void			){ return valID;	}	//	Определяем функцию получения текущего ID (адрес модуля на шине).		Параметры функции: нет. Функция возвращает текущий ID розетки, или 0 если модуль не определён.
		uint8_t			getVersion		(void			){ return valVers;	}	//	Определяем функцию получения текущей версии прошивки розетки.			Параметры функции: нет. Функция возвращает версию прошивки розетки, или 0 если модуль не определён.
		float			getPWR			(void			);						//	Объявляем  функцию получения напряжения питания.						Параметры функции: нет. Функция возвращает напряжение питания в Вольтах, или -1 при провале чтения.
		bool			setIDLED		(bool on 		);						//	Объявляем  функцию смены состояния светодиода обнаружения устройства.	Параметры функции: состояние светодиода true/false. Функция возвращает результат изменения состояния: true-успех / false-провал.
		int32_t			getErr			(void			);						//	Объявляем  функцию получения флагов ошибок из регистра диагностики.		Параметры функции: нет. Функция возвращает значение регистра диагностики, каждый из 16 бит которого является флагом ошибки, или -1 при провале чтения.
		bool			setState		(bool on	 	);						//	Объявляем  функцию смены состояния розетки.								Параметры функции: состояние розетки true/false. Функция возвращает результат изменения состояния: true-успех / false-провал.
		int8_t			getState		(void			);						//	Объявляем  функцию чтения состояния розетки.							Параметры функции: нет. Функция возвращает состояние розетки: true-успех / false-провал, или -1 при провале чтения состояния розетки.
		int8_t			digitalRead		(uint8_t sens	);						//	Объявляем  функцию чтения состояния датчиков уровней жидкости.			Параметры функции: один из вариантов SOCKET_SENSOR_XXX. Функция возвращает уровень датчика 0/1, байт битов если читаются все датчики, или -1 при провале чтения уровня датчика.
		int8_t			connectRead		(uint8_t sens	);						//	Объявляем  функцию чтения наличия   датчиков уровней жидкости.			Параметры функции: один из вариантов SOCKET_SENSOR_XXX. Функция возвращает флаг наличия датчика 0/1, байт битов если читается наличие всех датчиков, или -1 при провале чтения наличия датчика.
		bool			enableWDT		(uint16_t ms	);						//	Объявляем  функцию разрешения работы   сторожевого таймера розетки.		Параметры функции: время в миллисекундах от 1 до 65535. Функция возвращает результат включения сторожевого таймера: true-успех / false-провал.
		bool			disableWDT		(void	 		);						//	Объявляем  функцию запрета    работы   сторожевого таймера розетки.		Параметры функции: нет. Функция возвращает результат отключения сторожевого таймера: true-успех / false-провал.
		bool			resetWDT		(void			);						//	Объявляем  функцию сброса (перезапуск) сторожевого таймера розетки.		Параметры функции: нет. Функция возвращает результат сброса сторожевого таймера: true-успех / false-провал.
		int8_t			getStateWDT		(void			);						//	Объявляем  функцию чтения состояния сторожевого таймера розетки.		Параметры функции: нет. Функция возвращает состояние сторожевого таймера: 1-включён, 0-выключён, или -1 при провале чтения состояния сторожевого таймера.
																				//	
	private:																	//	
	/**	Внутренние переменные **/												//
		ModbusClient*	objModbus;												//	Объявляем  указатель на объект работы по протоколу Modbus.				Указатель получит адрес объекта в конструкторе класса.
		uint8_t			valID			=		0;								//	Определяем переменную для хранения ID розетки который был проверен.
		uint8_t			valVers			=		0;								//	Определяем переменную для хранения версии прошивки розетки.
		uint16_t		valWDT;													//	Объявляем  переменную для хранения времени сторожевого таймера в мс.	Определяется в enableWDT(), используется в resetWDT().
};

#endif