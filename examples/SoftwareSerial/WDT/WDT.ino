// ПРИМЕР УПРАВЛЕНИЯ РОЗЕТКОЙ С ВКЛЮЧЁННЫМ СТОРОЖЕВЫМ ТАЙМЕРОМ:                    //
// Введите любой символ в монитор последовательного порта...                       //
                                                                                   //
#include <SoftwareSerial.h>                                                        //   Подключаем библиотеку для работы с программной шиной UART.
#include <iarduino_Modbus.h>                                                       //   Подключаем библиотеку для работы по протоколу Modbus.
#include <iarduino_MB_Socket.h>                                                    //   Подключаем библиотеку для работы с розеткой.
                                                                                   //
SoftwareSerial     rs485(8,9);                                                     //   Создаём объект для работы с программной шиной UART-RS485 указывая выводы RX, TX.
ModbusClient       modbus(rs485, 2);                                               //   Создаём объект для работы по протоколу Modbus указывая объект программной шины UART-RS485 и вывод DE конвертера UART-RS485.
iarduino_MB_Socket socket(modbus);                                                 //   Создаём объект для работы с розеткой указывая объект протокола Modbus.
                                                                                   //
void setup(){                                                                      //
     Serial.begin(9600); while(!Serial);                                           //   Инициируем передачу данных в монитор последовательного порта, указав его скорость.
     rs485.begin(9600); while(!rs485);                                             //   Инициируем работу с программной шиной UART-RS485 указав её скорость.
     modbus.begin();                                                               //   Инициируем работу по протоколу Modbus.
//   modbus.setTimeout(10);                                                        //   Указываем максимальное время ожидания ответа по протоколу Modbus.
//   modbus.setDelay(4);                                                           //   Указываем минимальный интервал между отправляемыми сообщениями по протоколу Modbus.
//   modbus.setTypeMB( MODBUS_RTU );                                               //   Указываем тип протокола Modbus: MODBUS_RTU (по умолчанию), или MODBUS_ASCII.
     socket.begin(1);                                                              //   Инициируем работу с розеткой, указав её адрес. Если адрес не указан socket.begin(), то он будет найден, но это займёт некоторое время.
     socket.enableWDT(200);                                                        //   Включаем сторожевой таймер указав время в мс. Если между обращениями к функции socket.resetWDT() пройдёт указанное время, розетка сама отключится.
//   socket.disableWDT();                                                          //   Отключаем сторожевой таймер.
     socket.setState(true);                                                        //   Включаем розетку.
}                                                                                  //   
                                                                                   //
void loop(){                                                                       //
     socket.resetWDT();                                                            //   Сбрасываем сторожевой таймер, не давая ему сработать.
     delay(50);                                                                    //   Задержка между обращениями к функции socket.resetWDT() не должна превышать время указанное в socket.enableWDT().
//   Ждём ввода любого символа в монитор последовательного порта:                  //
     while( Serial.available() );                                                  //   Если символ введён, то входим в бесконечный цикл while(). Функция socket.resetWDT() больше вызываться не будет и сработает сторожевой таймер розетки.
//   Serial.println((String) "Сторожевой таймер="+socket.getStateWDT() );          //   Функция socket.getStateWDT() позволяет узнать включён или отключён сторожевой таймер функциями enableWDT(), disableWDT().
}                                                                                  //   Если сторожевой таймер сработал (отключил розетку), то сам он не отключается и позволит включить розетку после socket.resetWDT().
